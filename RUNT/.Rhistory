actions <- c("N", "S", "E", "W")
x <- 1:4
y <- 1:3
rewards <- matrix(rep(0, 12), nrow=3)
rewards[2, 2] <- NA
rewards[1, 4] <- 1
rewards[2, 4] <- -1
values <- rewards # initial values
states <- expand.grid(x=x, y=y)
# Transition probability
transition <- list("N" = c("N" = 0.8, "S" = 0, "E" = 0.1, "W" = 0.1),
"S"= c("S" = 0.8, "N" = 0, "E" = 0.1, "W" = 0.1),
"E"= c("E" = 0.8, "W" = 0, "S" = 0.1, "N" = 0.1),
"W"= c("W" = 0.8, "E" = 0, "S" = 0.1, "N" = 0.1))
# The value of an action (e.g. move north means y + 1)
action.values <- list("N" = c("x" = 0, "y" = 1),
"S" = c("x" = 0, "y" = -1),
"E" = c("x" = -1, "y" = 0),
"W" = c("x" = 1, "y" = 0))
# act() function serves to move the robot through states based on an action
act <- function(action, state) {
action.value <- action.values[[action]]
new.state <- state
#
if(state["x"] == 4 && state["y"] == 1 || (state["x"] == 4 && state["y"] == 2))
return(state)
#
new.x = state["x"] + action.value["x"]
new.y = state["y"] + action.value["y"]
# Constrained by edge of grid
new.state["x"] <- min(x[length(x)], max(x[1], new.x))
new.state["y"] <- min(y[length(y)], max(y[1], new.y))
#
if(is.na(rewards[new.state["y"], new.state["x"]]))
new.state <- state
#
return(new.state)
}
actions <- c("N", "S", "E", "W")
x <- 1:4
y <- 1:3
rewards <- matrix(rep(0, 12), nrow=3)
rewards[2, 2] <- NA
rewards[1, 4] <- 1
rewards[2, 4] <- -1
values <- rewards # initial values
states <- expand.grid(x=x, y=y)
# Transition probability
transition <- list("N" = c("N" = 0.8, "S" = 0, "E" = 0.1, "W" = 0.1),
"S"= c("S" = 0.8, "N" = 0, "E" = 0.1, "W" = 0.1),
"E"= c("E" = 0.8, "W" = 0, "S" = 0.1, "N" = 0.1),
"W"= c("W" = 0.8, "E" = 0, "S" = 0.1, "N" = 0.1))
# The value of an action (e.g. move north means y + 1)
action.values <- list("N" = c("x" = 0, "y" = 1),
"S" = c("x" = 0, "y" = -1),
"E" = c("x" = -1, "y" = 0),
"W" = c("x" = 1, "y" = 0))
# act() function serves to move the robot through states based on an action
act <- function(action, state) {
action.value <- action.values[[action]]
new.state <- state
#
if(state["x"] == 4 && state["y"] == 1 || (state["x"] == 4 && state["y"] == 2))
return(state)
#
new.x = state["x"] + action.value["x"]
new.y = state["y"] + action.value["y"]
# Constrained by edge of grid
new.state["x"] <- min(x[length(x)], max(x[1], new.x))
new.state["y"] <- min(y[length(y)], max(y[1], new.y))
#
if(is.na(rewards[new.state["y"], new.state["x"]]))
new.state <- state
#
return(new.state)
}
bellman.update <- function(action, state, values, gamma=1) {
state.transition.prob <- transition[[action]]
q <- rep(0, length(state.transition.prob))
for(i in 1:length(state.transition.prob)) {
new.state <- act(names(state.transition.prob)[i], state)
q[i] <- (state.transition.prob[i] * (rewards[state["y"], state["x"]] + (gamma * values[new.state["y"], new.state["x"]])))
}
sum(q)
}
value.iteration <- function(states, actions, rewards, values, gamma, niter) {
for (j in 1:niter) {
for (i in 1:nrow(states)) {
state <- unlist(states[i,])
if(i %in% c(4, 8)) next # terminal states
q.values <- as.numeric(lapply(actions, bellman.update, state=state, values=values, gamma=gamma))
values[state["y"], state["x"]] <- max(q.values)
}
}
return(values)
}
final.values <- value.iteration(states=states, actions=actions, rewards=rewards, values=values, gamma=0.99, niter=100)
final.values
library(datasets)
head(iris)
library(ggplot2)
library(datasets)
head(iris)
ggplot(iris, aes(Petal.Length,
Petal.Width,
color = Species)) +
geom_point() +
theme_bw()
library(ggplot2)
library(datasets)
head(iris)
ggplot(iris, aes(Petal.Length,
Petal.Width,
color = Species)) +
geom_point(size = 3) +
theme_bw()
library(dplyr)
library(ggplot2)
year <- c(1,2,1,2,1,2)
prod <- c(1,1,2,2,3,3)
quantity <- c(33,50,33,25,34,25)
df <- data.frame(year, prod, quantity)
rm(year, prod, quantity)
df <- df %>% group_by(year) %>% mutate(pos = cumsum(quantity)- quantity/2)
ggplot(data=df, aes(x=factor(1), y=quantity, fill=factor(prod))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = quantity), size=10) +  # note y = pos
facet_grid(facets = .~year, labeller = label_value) +
coord_polar(theta = "y")
initData <- read.csv("base_runt.csv", sep = ";")
info <- data.frame(initData$MARCA)
names(info)[1] <- "a"
dataCat <- info
setwd("~/RDatelligence/RUNT")
initData <- read.csv("base_runt.csv", sep = ";")
year <- c(1,2,1,2,1,2)
prod <- c(1,1,2,2,3,3)
quantity <- c(33,50,33,25,34,25)
df <- data.frame(year, prod, quantity)
df
rm(year, prod, quantity)
df
df <- df %>% group_by(year) %>% mutate(pos = cumsum(quantity)- quantity/2)
df
ggplot(data=df, aes(x=factor(1), y=quantity, fill=factor(prod))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = quantity), size=10) +  # note y = pos
facet_grid(facets = .~year, labeller = label_value) +
coord_polar(theta = "y")
initData <- read.csv("base_runt.csv", sep = ";")
info <- data.frame(initData$MARCA)
names(info)[1] <- "a"
dataCat <- info
#piegraph <- function(dataCat, titleLabel = "", fillLabel = ""){
filter1 <- group_by(.data = dataCat, by = a)
dataCat2 <- summarize(filter1, count = n())
dataCat2$prop <- dataCat2$count/sum(dataCat2$count)
dataCat2 <- arrange(dataCat2, desc(prop))
names(dataCat2)[1] <- "a"
dataCat2$a <- as.character(dataCat2$a)
dataCat2$a[dataCat2$prop < 0.1] <- "OTROS"
filter1 <- group_by(dataCat2, a)
dataCat2 <- summarize(filter1, count = sum(count), prop = sum(prop))
dataCat2
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = count), size=10) +  # note y = pos
coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=50, label = count), size=10) +  # note y = pos
coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = count), size=10) #+  # note y = pos
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = count), size=10) #+  # note y = pos
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), position = position_stack(vjust = 0.5), label = count), size=10) #+  # note y = pos
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1)), position = position_stack(vjust = 0.5, label = count), size=10) #+  # note y = pos
#coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1)), position = position_stack(vjust = 0.5), label = count), size=10) #+  # note y = pos
#coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1)), position = position_stack(vjust = 0.5), label = count, size=10) #+  # note y = pos
#coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity")
geom_text(aes(x= factor(1)), position = position_stack(vjust = 0.5), label = count, size=10) #+  # note y = pos
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1)), position = position_stack(vjust = 0.5), label = count, size=10) #+  # note y = pos
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1)), position = position_stack(vjust = 0.5), label = count, size=10) #+  # note y = pos
rm(list = ls())
initData <- read.csv("base_runt.csv", sep = ";")
info <- data.frame(initData$MARCA)
names(info)[1] <- "a"
dataCat <- info
#piegraph <- function(dataCat, titleLabel = "", fillLabel = ""){
filter1 <- group_by(.data = dataCat, by = a)
dataCat2 <- summarize(filter1, count = n())
dataCat2$prop <- dataCat2$count/sum(dataCat2$count)
dataCat2 <- arrange(dataCat2, desc(prop))
names(dataCat2)[1] <- "a"
dataCat2$a <- as.character(dataCat2$a)
dataCat2$a[dataCat2$prop < 0.1] <- "OTROS"
filter1 <- group_by(dataCat2, a)
dataCat2 <- summarize(filter1, count = sum(count), prop = sum(prop))
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1)), position = position_stack(vjust = 0.5), label = count, size=10) #+  # note y = pos
#coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5) #+  # note y = pos
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5, label = count) #+  # note y = pos
#coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a))) +
geom_bar(stat="identity")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a)), label = count) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5) #+  # note y = pos
#coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a), label = count)) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5) #+  # note y = pos
#coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a), label = count)) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5) +  # note y = pos
coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a), label = count)) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5) +  # note y = pos
coord_polar(theta = "y") +
labs(title = titleLabel, fill = fillLabel, x = "", y = "") + theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme_void()
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a), label = count)) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5) +  # note y = pos
coord_polar(theta = "y") +
labs(title = "titleLabel", fill = fillLabel, x = "", y = "") + theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme_void()
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a), label = count)) +
geom_bar(stat="identity") +
geom_text(position = position_stack(vjust = 0.5), size=5) +  # note y = pos
coord_polar(theta = "y") +
labs(title = "titleLabel", fill = "fillLabel", x = "", y = "") + theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme_void()
year <- c(1,2,1,2,1,2)
prod <- c(1,1,2,2,3,3)
quantity <- c(33,50,33,25,34,25)
df <- data.frame(year, prod, quantity)
rm(year, prod, quantity)
df <- df %>% group_by(year) %>% mutate(pos = cumsum(quantity)- quantity/2)
ggplot(data=df, aes(x=factor(1), y=quantity, fill=factor(prod))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = quantity), size=10) +  # note y = pos
facet_grid(facets = .~year, labeller = label_value) +
coord_polar(theta = "y")
ggplot(data=df, aes(x=factor(1), y=quantity, fill=factor(prod))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = quantity), size=1) +  # note y = pos
facet_grid(facets = .~year, labeller = label_value) +
coord_polar(theta = "y")
ggplot(data=df, aes(x=factor(1), y=quantity, fill=factor(prod))) +
geom_bar() +
geom_text(aes(x= factor(1), y=pos, label = quantity), size=10) +  # note y = pos
facet_grid(facets = .~year, labeller = label_value) +
coord_polar(theta = "y")
ggplot(data=df, aes(x=factor(1), y=quantity, fill=factor(prod))) +
geom_bar(stat="identity") +
geom_text(aes(x= factor(1), y=pos, label = quantity), size=10) +  # note y = pos
facet_grid(facets = .~year, labeller = label_value) +
coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=count, fill=factor(a), label = count)) +
geom_bar(stat="identity", width = 1)
ggplot(data=dataCat2, aes(x=factor(1), y=prop, fill=factor(a), label = prop)) +
geom_bar(stat="identity", width = 1)
ggplot(data=dataCat2, aes(x=factor(1), y=prop, fill=factor(a), label = prop)) +
geom_bar(stat="identity", width = 1) +
coord_polar(theta = "y")
ggplot(data=dataCat2, aes(x=factor(1), y=prop, fill=factor(a), label = prop)) +
geom_bar(stat="identity", width = 1) +
coord_polar(theta = "y") +
geom_text(position = position_stack(vjust = 0.5), size=5) +  # note y = pos
labs(title = "titleLabel", fill = "fillLabel", x = "", y = "") + theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme_void()
dataCat2$prop2 <- paste(round(dataCat2$prop*100, 1), "%")
dataCat2$prop2
ggplot(data=dataCat2, aes(x=factor(1), y=prop, fill=factor(a), label = prop2)) +
geom_bar(stat="identity", width = 1) +
coord_polar(theta = "y") +
geom_text(position = position_stack(vjust = 0.5), size=5) +  # note y = pos
labs(title = "titleLabel", fill = "fillLabel", x = "", y = "") + theme_bw() +
theme(panel.grid=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.ticks=element_blank()) +
theme_void()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c("a", "b", "c", "d")
match(a, letters(1:5))
a <- c("a", "b", "c", "d")
match(a, letters())
a <- c("a", "b", "c", "d")
match(a, letters)
a <- data.frame(letters = c("a", "b", "c", "d"))
b <- data.frame(letters, LETTERS)
merge(a, b)
initData
write.table(names(initData), "nombres.txt")
read.csv("nombres.csv", sep = ";")
read.csv("nombres.csv", sep = ",")
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
