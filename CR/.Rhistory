testAnswers = test$fraud
test$fraud = NULL
fit <- rpart(fraud ~. , data = tidyData[train, ], method = 'class')
predict_unseen <-predict(fit, test, type = 'class')
table(testAnswers, predict_unseen)
rpart.plot(fit)
ctrl = rpart.control()
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud"))]
library(MASS)
library(rpart)
library(rpart.plot)
train =  sample(1:nrow(tidyData), floor(0.7*nrow(newMainData)))
trainSet = tidyData[train, ]
test = tidyData[-train, ]
testAnswers = test$fraud
test$fraud = NULL
ctrl = rpart.control()
fit <- rpart(fraud ~. , data = tidyData[train, ], method = 'class', control = ctrl)
predict_unseen <-predict(fit, test, type = 'class')
table(testAnswers, predict_unseen)
rpart.plot(fit)
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud", "status"))]
library(MASS)
library(rpart)
library(rpart.plot)
train =  sample(1:nrow(tidyData), floor(0.7*nrow(newMainData)))
trainSet = tidyData[train, ]
test = tidyData[-train, ]
testAnswers = test$fraud
test$fraud = NULL
ctrl = rpart.control()
fit <- rpart(fraud ~. , data = tidyData[train, ], method = 'class', control = ctrl)
predict_unseen <-predict(fit, test, type = 'class')
table(testAnswers, predict_unseen)
rpart.plot(fit)
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud", "status", "is11Or12", "blacklist"))]
library(MASS)
library(rpart)
library(rpart.plot)
train =  sample(1:nrow(tidyData), floor(0.7*nrow(newMainData)))
trainSet = tidyData[train, ]
test = tidyData[-train, ]
testAnswers = test$fraud
test$fraud = NULL
ctrl = rpart.control()
fit <- rpart(fraud ~. , data = tidyData[train, ], method = 'class', control = ctrl)
predict_unseen <-predict(fit, test, type = 'class')
table(testAnswers, predict_unseen)
rpart.plot(fit)
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud", "status", "is11Or12", "blacklist", "chargeback"))]
library(MASS)
library(rpart)
library(rpart.plot)
train =  sample(1:nrow(tidyData), floor(0.7*nrow(newMainData)))
trainSet = tidyData[train, ]
test = tidyData[-train, ]
testAnswers = test$fraud
test$fraud = NULL
ctrl = rpart.control()
fit <- rpart(fraud ~. , data = tidyData[train, ], method = 'class', control = ctrl)
predict_unseen <-predict(fit, test, type = 'class')
table(testAnswers, predict_unseen)
rpart.plot(fit)
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud", "status", "is11Or12", "blacklist", "chargeback"))]
str(tidyData)
tidyData = tidyData[, -which(names(tidyData) %in% c("count", "fullDate", "eval_uuid", "year", "month", "period", "uuid", "dayOfWeek"))]
str(tidyData)
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud", "status", "is11Or12", "blacklist", "chargeback"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("count", "fullDate", "eval_uuid", "year", "month", "period", "uuid", "dayOfWeek"))]
library(MASS)
library(rpart)
library(rpart.plot)
train =  sample(1:nrow(tidyData), floor(0.7*nrow(newMainData)))
trainSet = tidyData[train, ]
test = tidyData[-train, ]
testAnswers = test$fraud
test$fraud = NULL
ctrl = rpart.control()
fit <- rpart(fraud ~. , data = tidyData[train, ], method = 'class', control = ctrl)
predict_unseen <-predict(fit, test, type = 'class')
table(testAnswers, predict_unseen)
rpart.plot(fit)
table(predict_unseen)
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud", "status", "is11Or12", "blacklist", "chargeback"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("count", "fullDate", "eval_uuid", "year", "month", "period", "uuid", "dayOfWeek"))]
str(tidyData)
tidyData = newMainData
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "eval_uuid", "count", "fraudRate", "fullDate", "legit", "Ending", "chargeback", "status", "blacklist", "fraudExp", "whitelist", "is11Or12", "prelimFraud"))]
#tidyData = tidyData[, -which(names(tidyData) %in% c("uuid", "dayOfWeek", "creation_date", "email", "card", "period", "year", "month", "ID", "Domain", "Ending", "eval_uuid", "fullDate", "count", "fraudRate"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudExp", "legit", "creation_date", "email", "card", "ID", "Domain", "Ending"))] #Not all instances
tidyData = tidyData[, -which(names(tidyData) %in% c("prelimFraud", "status", "is11Or12", "blacklist", "chargeback"))]
tidyData = tidyData[, -which(names(tidyData) %in% c("fraudRate", "count", "fullDate", "eval_uuid", "year", "month", "period", "uuid", "dayOfWeek"))]
library(MASS)
library(rpart)
library(rpart.plot)
train =  sample(1:nrow(tidyData), floor(0.7*nrow(newMainData)))
trainSet = tidyData[train, ]
test = tidyData[-train, ]
testAnswers = test$fraud
test$fraud = NULL
ctrl = rpart.control()
fit <- rpart(fraud ~. , data = tidyData[train, ], method = 'class', control = ctrl)
predict_unseen <-predict(fit, test, type = 'class')
table(testAnswers, predict_unseen)
rpart.plot(fit)
data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"))
a = data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"))
as.difftime(c("0:3:20", "11:23:15")
as.difftime(c("0:3:20", "11:23:15"))
as.difftime("0:3:20") - as.difftime("11:23:15")
difftime("0:3:20", "11:23:15")
as.POSIXct("0:3:20")
as.POSIXct("00:03:20")
as.difftime("0:3:20")
a = data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"))
timeDiff = function(x, a){
as.difftime(a[x-1, 2]) - as.difftime(a[x, 2])
}
result = sapply(2:nrow(a), timeDiff, a)
result
a = data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"))
timeDiff = function(x, a){
as.difftime(a[x-1, 2]) - as.difftime(a[x, 2])
}
result = sapply(2:nrow(a), timeDiff, a)
x = 2
as.difftime(a[x-1, 2])
x-1, 2]
a[x-1, 2]
a = data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"), stringsAsFactors = FALSE)
timeDiff = function(x, a){
as.difftime(a[x-1, 2]) - as.difftime(a[x, 2])
}
result = sapply(2:nrow(a), timeDiff, a)
result
install.packages("elpatron")
a = data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"), stringsAsFactors = FALSE)
x = 2
timeDiff = function(x, a){
hms  as.difftime(a[x-1, 2]) - as.difftime(a[x, 2])
}
result = sapply(2:nrow(a), timeDiff, a)
result
a = data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"), stringsAsFactors = FALSE)
x = 2
timeDiff = function(x, a){
hms  as.difftime(a[x-1, 2]) - as.difftime(a[x, 2])
}
result = sapply(2:nrow(a), timeDiff, a)
result
a = data.frame(Number = c(1, 2, 3), Time = c("10:25:00", "10:35:15", "10:42:26"), stringsAsFactors = FALSE)
x = 2
timeDiff = function(x, a){
as.difftime(a[x-1, 2]) - as.difftime(a[x, 2])
}
result = sapply(2:nrow(a), timeDiff, a)
result
1:3 * 2
rep(5, 7)
mydata = data.frame(A = rep(5, 7), B = rep(4, 7), C = rep(4, 7), d = rep(4, 7))
mydata[-1:3 * 2, ]
mydata[-(1:3 * 2), ]
mydata = data.frame(A = rep(5, 7), B = rep(4, 7), C = rep(4, 7), d = rep(4, 7))
mydata[-(1:3 * 2), ]
mydata = data.frame(A = rep(5, 7), B = rep(4, 7), C = rep(4, 7), d = rep(4, 7))
mydata
mydata[-(1:3 * 2), ]
10 %% 2
10 %% 2 ==0
which(1:nrow(myData)) %% 2 == 0
which(1:nrow(mydata)) %% 2 == 0
1:nrow(mydata)) %% 2 == 0
1:nrow(mydata) %% 2 == 0
1:nrow(mydata) %% 2 == 1
mydata[which(1:nrow(mydata) %% 2 == 1) , ]
mydata[!which(1:nrow(mydata) %% 2 == 1) , ]
mydata[which(!1:nrow(mydata) %% 2 == 1) , ]
mydata[which(!1:nrow(mydata) %% 2 == 0) , ]
mydata[which(!1:nrow(mydata) %% 2 != 1) , ]
mydata[which(!1:nrow(mydata) %% 2 != 1) , ]
mydata[which(!1:nrow(mydata) %% 2 == 0) , ]
mydata[which(!1:nrow(mydata) %% 2 == 0) , ]
seq(1, 7, by = 2)
seq(0, 7, by = 2)
seq(1, 7, by = 2)
seq(2, 7, by = 2)
seq(2, 8, by = 2)
mydata[seq(2, 8, by = 2) , ]
mydata[-seq(2, nrow(mydata), by = 2) , ]
mydata[seq(1, 8, by = 2) , ]
u<-data.frame(a1=c(10,10,10),a2=c(0,10,5),a3=c(10,20,30),a4=c(2,7,9))
u
newData = lapply(2:ncol(u), function(x, u){
-u[, x-1] + u[, x]
})
newData = lapply(2:ncol(u), function(x, u){
-u[, x-1] + u[, x]
}, u)
newData
newData = lapply(2:ncol(u), function(x, u){
-u[, x-1] + u[, x]
}, u) %>% unlist()
newData = unlist(lapply(2:ncol(u), function(x, u){-u[, x-1] + u[, x]}, u) )
newData
newData = t(unlist(lapply(2:ncol(u), function(x, u){-u[, x-1] + u[, x]}, u) ))
newData
newData = matrix(t(unlist(lapply(2:ncol(u), function(x, u){-u[, x-1] + u[, x]}, u) )), ncol = ncol(u) - 1)
newData
cbind(u$a1, newData)
data.frame(cbind(u$a1, newData))
paste0("a", 1:3)
paste0("a", 1:4)
names(result) = paste0("a", 1:4)
c("a", 1:4)
paste0("a", 1:4)
class(paste0("a", 1:4))
names(result)
result
newData = matrix(t(unlist(lapply(2:ncol(u), function(x, u){-u[, x-1] + u[, x]}, u) )), ncol = ncol(u) - 1)
result = data.frame(cbind(u$a1, newData))
result
names(result)
names(result) = paste0("a", 1:4)
names(result)
result
rm(list = ls())
5 -> a
5 ->> d
#ys=cumsum(rnorm(range2)/sqrt(range2))
ys=runif(range2)
library(ggplot2)
library(plotly)
library(shiny)
library(shiny); runApp('example_stackOverflow.R')
install.packages("plotly")
library(ggplot2)
library(plotly)
library(shiny)
runApp('example_stackOverflow.R')
[1:3]
data.frame(id = 1:3, test_1 = c(10, "", 58), test_2 = c(20, 3, 98), test_3 = c(30, 10, "") )
data.frame(id = 1:3, test_1 = c(10, "", 58), test_2 = c(20, 3, 98), test_3 = c(30, 10, ""), test_4 = c(40, 20, ""), stringsAsFactors = FALSE)
data = data.frame(id = 1:3, test_1 = c(10, "", 58), test_2 = c(20, 3, 98), test_3 = c(30, 10, ""), test_4 = c(40, 20, ""), stringsAsFactors = FALSE)
as.matrix(data)
df1 <- mtcars[1:3, 1:4]
df1$test_array <- lapply(data.frame(t(df1)), as.numeric)
df1
str(df1)
cos(2*pi())
pi
cos(2*pi)
angle = nSides/360
angle = nSides/(2*pi)
nSides = 5
angle = nSides/(2*pi)
angle
angle2 = (pi - angle)/2
ratioCal = function (nSides){
angle = nSides/(2*pi)
smallSide = radius * sin(angle/2) * 2
perimeter = smallSide * nSides
ratio = perimeter/radius
return(ratio)
}
radius = 1
ratioCal = function (nSides, radius){
angle = nSides/(2*pi)
smallSide = radius * sin(angle/2) * 2
perimeter = smallSide * nSides
ratio = perimeter/radius
return(c(nSides, ratio))
}
sapply(c(1, 10, 100, 1000, 10000), ratioCal, radius)
ratioCal = function (nSides, radius = 1){
angle = nSides/(2*pi)
smallSide = radius * sin(angle/2) * 2
perimeter = smallSide * nSides
ratio = perimeter/radius
return(c(nSides, ratio))
}
ratioCal(10000)
ratioCal = function (nSides, radius = 1){
angle = (2*pi)/nSides
smallSide = radius * sin(angle/2) * 2
perimeter = smallSide * nSides
ratio = perimeter/radius
return(c(nSides, ratio))
}
ratioCal(10000)
ratioCal = function (nSides, radius = 1){
angle = (2 * pi)/nSides
smallSide = radius * sin(angle/2) * 2
perimeter = smallSide * nSides
diameter = 2 * radius
ratio = perimeter/diameter
return(c(nSides, ratio))
}
sapply(c(1:10, 100, 1000, 10000), ratioCal, radius)
t(sapply(c(1:10, 100, 1000, 10000), ratioCal, radius))
data.frame(t(sapply(c(1:10, 100, 1000, 10000), ratioCal, radius)))
names(data) = c("Número de lados", "Razón entre perímetro y diámetro")
data
data = data.frame(t(sapply(c(1:10, 100, 1000, 10000), ratioCal, radius)))
data
names(data) = c("NumLados", "Razon")
data
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X)
initTable$value = gsub(",", "", initTable$value)
str(initTable$value)
variables = c("Total.diplomas", "Total.Cienc..Bsc")
initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, color = key) + geom_line()
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, color = key) + geom_line(group = 2)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, color = key) + geom_path(group = 2)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = factor(X), y = value, color = key) + geom_path(group = 2)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, color = key) + geom_path(group = 2)
arrange(initTable[initTable$key %in% variables, ], key, X)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value)
variables = c("Total.diplomas", "Total.Cienc..Bsc")
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, color = key) + geom_path(group = 2)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, colour = key) + geom_path(group = 2)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, colour = key) + geom_path(group = 1)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, colour = key) + geom_path(group = 0)
initTable
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value)
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, colour = key) + geom_path(group = 0)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value)
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, colour = key) + geom_line(group = 0)
initTable[initTable$key %in% variables, ]
str(initTable)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value) %>%
as.numeric()
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, colour = key) + geom_line(group = 0)
initTable[initTable$key %in% variables, ]
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value) %>%
as.numeric()
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value, colour = key) + geom_path(group = 0)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value) + geom_path(aes(color = key), group = 1)
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value) + geom_path(aes(color = key), group = 1)
variables = c("Cienc.Salud.U.Pb")
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value) + geom_path(aes(color = key), group = 1)
test_data <-
data.frame(
var0 = 100 + c(0, cumsum(runif(49, -20, 20))),
var1 = 150 + c(0, cumsum(runif(49, -10, 10))),
date = seq(as.Date("2002-01-01"), by="1 month", length.out=100)
)
test_data <-
data.frame(
var0 = 100 + c(0, cumsum(runif(49, -20, 20))),
var1 = 150 + c(0, cumsum(runif(49, -10, 10))),
date = seq(as.Date("2002-01-01"), by="1 month", length.out=100)
)
ggplot(test_data, aes(date)) +
geom_line(aes(y = var0, colour = "var0")) +
geom_line(aes(y = var1, colour = "var1"))
test_data
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value) %>%
as.numeric()
#
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb"
initTable = read.csv(dir()[grepl("Costa", dir())])
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())])
ggplot(initTable) + aes(x = X) + geom_path(aes(y = variables[1], color = key))
ggplot(initTable) + aes(x = X) + geom_path(aes(y = variables[1], color = variables[1]))
variables[1]
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value) %>%
as.numeric()
#, "Cienc.Soc.U.Pb"
variables = c("Cienc.Salud.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value) + geom_path(aes(color = key), group = 1)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value) %>%
as.numeric()
#
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value) + geom_path(aes(color = key), group = 1)
test_data <-
data.frame(
var0 = 100 + c(0, cumsum(runif(49, -20, 20))),
var1 = 150 + c(0, cumsum(runif(49, -10, 10))),
date = seq(as.Date("2002-01-01"), by="1 month", length.out=100)
)
initTable[initTable$key %in% variables, ]
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value) %>%
as.numeric()
#
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value) + geom_line(aes(color = key), group = 1)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/RDatelligence/CR")
initTable = read.csv(dir()[grepl("Costa", dir())]) %>%
gather(key, value, -X) %>%
arrange(key, X)
initTable$value = gsub(",", "", initTable$value) %>%
as.numeric()
#
variables = c("Cienc.Salud.U.Pb", "Cienc.Soc.U.Pb")
#initTable[initTable$key %in% variables, ]
ggplot(initTable[initTable$key %in% variables, ]) + aes(x = X, y = value) + geom_line(aes(color = key))
