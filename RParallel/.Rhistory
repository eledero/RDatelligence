w <- c(2, 1, 3, 1)
y <- sum((x * W)/sum(w))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- sum((x * w)/sum(w))
y
?lm
lm(y ~ X)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(y ~ y)
lm(x ~ y)
a <- data(mtcars)
names(a)
names(a)
install.packages("datasets")
lbrary(datasets)
library(datasets)
a <- data(mtcars)
a
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
mns = NULL
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(0.2, n = 40)))
if (i %% 10 == 0) {
Sys.sleep(0.2)
hist(mns)
par(lwd=2)
}
}
mns = NULL
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(0.2, n = 40)))
#if (i %% 10 == 0) {
#Sys.sleep(0.2)
#hist(mns)
#par(lwd=2)
#}
}
hist(mns)
mean(mns)
sd(mns)
sd(mns)*sqrt(1000)
hist(mns, breaks = 30)
hist(mns, breaks = 40)
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(0.2, n = 40)))
#if (i %% 10 == 0) {
#Sys.sleep(0.2)
#hist(mns)
#par(lwd=2)
#}
}
hist(mns, breaks = 40)
sd(mns)
sd(mns)*sqrt(1000)
mean(rexp(0.2, n = 1000)
mean(rexp(0.2, n = 1000))
mean(rexp(0.2, n = 1000))
mns2 <-  mean(rexp(0.2, n = 1000))
mns2 <-  rexp(0.2, n = 1000)
mean(mns2)
sd(mns2)
mns = NULL
for (i in 1 : 1000) {
mns = c(mns, mean(rexp(0.2, n = 40)))
#if (i %% 10 == 0) {
#Sys.sleep(0.2)
#hist(mns)
#par(lwd=2)
#}
}
hist(mns, breaks = 40)
mean(mns)
sd(mns)
sd(mns)*sqrt(40)
hist(mns, breaks = 40)
#First of all, let's create 1000 random exponentials:
mns <-  rexp(0.2, n = 1000)
#Second, let's
mns2 = NULL
for (i in 1 : 1000) {
mns2 = c(mns2, mean(rexp(0.2, n = 40)))
}
#Question 1. Show the sample mean and compare it to the theoretical mean of the distribution.
hist(mns, breaks = 40)
mns <-  rexp(0.2, n = 1000)
hist(mns, breaks = 40)
hist(mns2, breaks = 40)
hist(mns, breaks = 40)
mean(mns2)
sd(mns2)
mean(mns)
sd(mns)*sqrt(40)
mean(mns)
sd(mns)
mean(mns2)
sd(mns2)
#First of all, let's create 1000 random exponentials:
mns <-  rexp(0.2, n = 1000)
#Second, let's create 1000 averages of 40 random exponentials each:
mns2 = NULL
for (i in 1 : 1000) {
mns2 = c(mns2, mean(rexp(0.2, n = 40)))
}
#Question 1. Show the sample mean and compare it to the theoretical mean of the distribution.
m1 <- mean(mns)
m2 <- mean(mns2)
print(paste("- The mean of the 1000 random exponentials is ", m1, sep = ""))
print(paste("- The mean of the 1000 averages of 40 random exponentials is ", m2, sep = ""))
print(paste("- The theoretical mean of the distribution is 1/Î», i.e. 5", m2, sep = ""))
vardata <- data.frame(mns, mns2)
#marginal density of x - plot on top
plot_top <- ggplot(xy, aes(vardata, fill=zvar)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
library(ggplot2)
#marginal density of x - plot on top
plot_top <- ggplot(xy, aes(vardata, fill=zvar)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
vardata <- data.frame(mns, mns2)
library(ggplot2)
#marginal density of x - plot on top
plot_top <- ggplot(vardata, aes(vardata, fill=zvar)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_top
library(ggplot2)
#marginal density of x - plot on top
plot_top <- ggplot(vardata, aes(vardata$mns, fill=1)) +
geom_density(alpha=.5) +
scale_fill_manual(values = c("orange", "purple")) +
theme(legend.position = "none")
plot_top
p1<-ggplot(xy, aes(vardata$mns)) + geom_density()
p1
p1<-ggplot(vardata, aes(mns)) + geom_density()
p1
p1<-ggplot(vardata, aes(mns)) + ggplot(vardata, aes(mns2)) + geom_density()
p1
p1<-ggplot(vardata, aes(mns)) # + ggplot(vardata, aes(mns2)) + geom_density()
p1
p1<-ggplot(vardata, aes(mns))  + geom_density()
p1
rep(1, 1000)
cbind(rep(1, 1000), mns)
rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2))
vardata <- rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2))
names(vardata) <- c("cat", "mean")
vardata <- rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2))
names(vardata) <- c("cat", "mean")
vardata <- rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2))
names(vardata) <- c("cat", "mean")
var1 <- var(mns)
var2 <- var(mns2)
vardata <- rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2))
names(vardata) <- c("cat", "mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
vardata <- as.dataframe(rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2)))
vardata <- as.dataframe(rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2)))
names(vardata) <- c("cat", "mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
vardata <- as.dataframe(rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2)))
View(vardata)
View(vardata)
names(vardata) <- c("cat", "mean")
View(vardata)
vardata <- as.dataframe(rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2)))
vardata <- as.data.frame(rbind(cbind(rep(1, 1000), mns), cbind(rep(2, 1000), mns2)))
names(vardata) <- c("cat", "mean")
View(vardata)
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
p3
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
p3
vardata <- as.data.frame(rbind(cbind(as.factor(rep(1, 1000)), mns), cbind(as.factor(rep(2, 1000)), mns2)))
names(vardata) <- c("cat", "mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
p3
vardata
cbind(as.factor(rep(1, 1000)), mns)
cbind(as.factor(rep(2, 1000)), mns2)
(rep(2, 1000))
as.factor(rep(1, 1000)), mns), cbind(as.factor(rep(2, 1000))
asic density
p1<-ggplot(xy, aes(xvar)) + geom_density()
#histogram with density line overlaid
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
#split and color by third variable, alpha fades the color a bit
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
grid.arrange(p1, p2, p3, nrow=1)
#basic density
p1<-ggplot(xy, aes(xvar)) + geom_density()
#histogram with density line overlaid
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
#split and color by third variable, alpha fades the color a bit
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
grid.arrange(p1, p2, p3, nrow=1)
library(ggplot2)
#basic density
p1<-ggplot(xy, aes(xvar)) + geom_density()
#histogram with density line overlaid
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
#split and color by third variable, alpha fades the color a bit
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
grid.arrange(p1, p2, p3, nrow=1)
library(ggplot2)
library(gridExtra)
set.seed(10005)
xvar <- c(rnorm(1500, mean = -1), rnorm(1500, mean = 1.5))
yvar <- c(rnorm(1500, mean = 1), rnorm(1500, mean = 1.5))
zvar <- as.factor(c(rep(1, 1500), rep(2, 1500)))
xy <- data.frame(xvar, yvar, zvar)
#basic density
p1<-ggplot(xy, aes(xvar)) + geom_density()
#histogram with density line overlaid
p2<-ggplot(xy, aes(x=xvar)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) +
geom_density(color="blue")
#split and color by third variable, alpha fades the color a bit
p3<-ggplot(xy, aes(xvar, fill = zvar)) + geom_density(alpha = 0.2)
grid.arrange(p1, p2, p3, nrow=1)
p3
as.factor(rep(2, 1000))
cbind(as.factor(rep(2, 1000)), mns2)
as.factor(c(rep(1, 1000), rep(2, 1000)))
factor <- as.factor(c(rep(1, 1000), rep(2, 1000)))
meanData <- cbind(mns, mns2)
vardata <- data.frame(factor, meanData)
names(vardata) <- c("cat", "mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
p3
vardata
head(vardata)
meanData
meanData <- rbind(mns, mns2)
meanData
meanData <- cbind(mns, mns2)
meanData
mns
mns2
meanData <- cbind(mns, mns2)
meanData
meanData <- rbind(mns, mns2)
meanData
meanData <- c(mns, mns2)
meanData
vardata <- data.frame(factor, meanData)
names(vardata) <- c("cat", "mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
head(vardata)
p3
var1 <- var(mns)
var2 <- var(mns2)
factor <- as.factor(c(rep("1000 random exponentials", 1000), rep("1000 averages of 40 random exponentials", 1000)))
meanData <- c(mns, mns2)
vardata <- data.frame(factor, meanData)
names(vardata) <- c("Category", "Mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
head(vardata)
p3
vardata <- data.frame(factor, meanData)
vardata
factor
names(vardata) <- c("Category", "Mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
p3
var1 <- var(mns)
var2 <- var(mns2)
factor <- as.factor(c(rep(1, 1000), rep(2, 1000)))
meanData <- c(mns, mns2)
vardata <- data.frame(factor, meanData)
names(vardata) <- c("Category", "Mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
head(vardata)
p3
vardata <- data.frame(mns, mns2)
p3
factor <- as.factor(c(rep(1, 1000), rep(2, 1000)))
meanData <- c(mns, mns2)
vardata <- data.frame(factor, meanData)
names(vardata) <- c("Category", "Mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
head(vardata)
p3
factor <- as.factor(c(rep(1, 1000), rep(2, 1000)))
meanData <- c(mns, mns2)
vardata <- data.frame(factor, meanData)
names(vardata) <- c("Category", "Mean")
p3<-ggplot(vardata, aes(mean, fill = cat)) + geom_density(alpha = 0.2)
p3
library(MASS)
?shuttle
head(shuttle)
newdata <- shuttle
newdata$use <- (newdata$use == "auto")
newdata$use <- (newdata$use == "auto")
mylogit <- glm(use ~ wind, data = newdata, family = "binomial")
newdata$use
newdata$use <- (newdata$use == "auto")*1
newdata$use
shuttle$use
newdata$use <- (newdata$use == "noauto")
newdata$use
newdata$use[newdata$use == "auto"] <- 1
newdata$use
newdata <- shuttle
newdata$use[newdata$use == "auto"] <- 1
newdata$use
newdata$use[is.na(newdata$use)]
newdata$use[is.na(newdata$use)] <- 1
head(shuttle)
newdata <- shuttle
newdata$use <- as.character(newdata$use)
newdata$use
newdata$use[newdata$use == "auto"] <- 1
newdata$use
newdata <- shuttle
newdata$use <- as.character(newdata$use)
newdata$use <- newdata$use == "auto"
newdata$use
newdata$use <- as.numeric(newdata$use == "auto")
newdata$use
newdata <- shuttle
newdata$use <- as.character(newdata$use)
newdata$use[newdata$use == "auto"] <- 1
newdata$use[newdata$use == "noauto"] <- 0
mylogit <- glm(use ~ wind, data = newdata, family = "binomial")
newdata$use
newdata$use <- as.numeric(newdata$use)
mylogit <- glm(use ~ wind, data = newdata, family = "binomial")
mylogit
summary(mylogit)
exp(coef(mylogit))
InsectSprays
exp(coeff(mylogit))
exp(mylogit$coeff)
newdata <- shuttle
newdata$use <- as.character(newdata$use)
newdata$use[newdata$use == "auto"] <- 0
newdata$use[newdata$use == "noauto"] <- 1
newdata$use <- as.numeric(newdata$use)
mylogit <- glm(use ~ wind, data = newdata, family = "binomial")
summary(mylogit)
mylogit
install.packages("swirl")
install_from_swirl("Regression Models")
library(swirl)
rm(list=ls())
install_from_swirl("Regression Models")
install_from_swirl("Statistical Inference")
swirl()
3/36
1 - 3/36
deck
52
1/13
0
12/52
2/51
0.8*1.6/2
0.64
mypdf
0.64
integrate(mypdf,0,1.6)
sqrt(2)
0
0.001 * (99.97/100)
0.001 * (98.5/100)
97.5/100 * (98.5/100)
97.5/100 * (0.001)
99.7/100 * (0.001)
1 - (99.7/100 * (0.001))
0.3/100 * (0.001)
99.7/100 * (0.999)
skip()
quit
?
hola
q()
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
install_from_swirl("Statistical Inference")
rm(list=ls())
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3,
| col='red')
abline(regrline, lwd=3, | col='red')
abline(regrline, lwd=3,  col='red')
summary(regrline)
lm(child ~ parent)
lm(child ~ parent, data = galton)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1] -> ols.ic
fit$coef[2] -> ols.slope
#Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs-rhs
all.equal(lhs, rhs)
varChild <- var()
varChild <- var(a)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild varEst + varChild)
all.equal(varChild, varEst + varChild)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
residuals(efit)
sum(resid(efit))
mean(resid(efit))
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals ^ 2)/(n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
sRes/sTot
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$parent, galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1,
| galton)
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <-eliminate("Girth", trees)
head(trees2)
fit2 <-
| lm(Volume ~ Height + Constant -1, trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
(99.7% * 98.5%)
99.7% * 98.5%
99.7/100 * 98.5/100
99.7/100 * 0.001
99.7/100 * 0.001
1.5/100 * 0.001
99.7/100 * 0.999
99.7/100 * 0.985
0.001 * 0.985
rm(list = ls())
setwd("./MachLearning/FinalProj")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
PCASet <- train[, -c(1:7)]
PCASet <- PCASet[, colSums(is.na(PCASet)) == 0]
b <- c()
for(i in 1:ncol(PCASet)){
if(i != ncol(PCASet)){
b[i] <- sum(as.character(PCASet[, i]) == "")
} else{
b[i] <- 0
}
}
b <- (b == 0)
PCASet <- PCASet[, b]
names(PCASet)
library(caret)
library(kernlab)
library(e1071)
model2 <- train(classe ~ ., method = "rf", data = PCASet)
param <- trainControl(repeats = 10, number = 3)
model2 <- train(classe ~ ., method = "rf", data = PCASet)
library(doMC)
install.packages("doMC")
