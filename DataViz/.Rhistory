set.seed(65)
datos    <- Boston
n        <- nrow(datos)
muestra  <- sample(n,n*.70)
train    <- datos[muestra, ]
test     <- datos[-muestra, ]
maxs      <- apply(train, 2, max)
mins      <- apply(train, 2, min)
datos_nrm <- as.data.frame(scale(datos, center = mins, scale = maxs - mins))
train_nrm <- datos_nrm[muestra, ]
test_nrm  <- datos_nrm[-muestra, ]
nms  <- names(train_nrm)
frml <- as.formula(paste("medv ~", paste(nms[!nms %in% "medv"], collapse = " + ")))
modelo.nn <- neuralnet(frml,
data          = train_nrm,
hidden        = c(7,5), # ver Notas para detalle
threshold     = 0.05,   # ver Notas para detalle
algorithm     = "rprop+"
)
install.packages("neuralnet")
modelo.nn <- neuralnet(frml,
data          = train_nrm,
hidden        = c(7,5), # ver Notas para detalle
threshold     = 0.05,   # ver Notas para detalle
algorithm     = "rprop+"
)
install.packages("ggplot2")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("neuralnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(MASS); library(neuralnet); library(ggplot2)
set.seed(65)
datos    <- Boston
n        <- nrow(datos)
muestra  <- sample(n,n*.70)
train    <- datos[muestra, ]
test     <- datos[-muestra, ]
maxs      <- apply(train, 2, max)
mins      <- apply(train, 2, min)
datos_nrm <- as.data.frame(scale(datos, center = mins, scale = maxs - mins))
train_nrm <- datos_nrm[muestra, ]
test_nrm  <- datos_nrm[-muestra, ]
nms  <- names(train_nrm)
frml <- as.formula(paste("medv ~", paste(nms[!nms %in% "medv"], collapse = " + ")))
modelo.nn <- neuralnet(frml,
data          = train_nrm,
hidden        = c(7,5), # ver Notas para detalle
threshold     = 0.05,   # ver Notas para detalle
algorithm     = "rprop+"
)
medv.predict <- pr.nn$net.result*(max(datos$medv)-min(datos$medv))+min(datos$medv)
medv.real    <- (test_nrm$medv)*(max(datos$medv)-min(datos$medv))+min(datos$medv)
pr.nn   <- compute(modelo.nn,within(test_nrm,rm(medv)))
medv.predict <- pr.nn$net.result*(max(datos$medv)-min(datos$medv))+min(datos$medv)
medv.real    <- (test_nrm$medv)*(max(datos$medv)-min(datos$medv))+min(datos$medv)
(se.nn <- sum((medv.real - medv.predict)^2)/nrow(test_nrm))
qplot(x=medv.real, y=medv.predict, geom=c("point","smooth"), method="lm",
main=paste("Real Vs Prediccion. Summa de Error Cuadratico=", round(se.nn,2)))
plot(modelo.nn)
library(MASS)
library(forecast);
attach(FLUJO_EFECTIVO_2016_2017_SEMANAL_09_02_2017_REVISADO_Sr_PATIÑO_Y_MARTHA_1_1_)
df<-FLUJO_EFECTIVO_2016_2017_SEMANAL_09_02_2017_REVISADO_Sr_PATIÑO_Y_MARTHA_1_1_
df    <- Boston
v     <- names(df[,sapply(FLUJO_EFECTIVO_2016_2017_SEMANAL_09_02_2017_REVISADO_Sr_PATIÑO_Y_MARTHA_1_1_, is.numeric)])
plot(modelo.nn)
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("XLConnect")
load("~/Desktop/Sancho/.RData")
library(readxl)
Base_Banco_GNO <- read_excel("~/Desktop/Sancho/Base Banco GNO.XLSX")
View(Base_Banco_GNO)
install.packages("dplyr","tidyr","klaR","scales")
install.packages("tidyr")
install.packages("dplyr")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(ggplot2)
install.packages("scales")
install.packages("scales")
library(reshape2)
library(XLConnect)
library(tidyr)
library(klaR)
library(ggplot2)
library(dplyr)
library(scales)
install.packages("klaR")
library(reshape2)
library(XLConnect)
install.packages("XLConnectJars", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(XLConnect)
install.packages("rJava", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(XLConnect)
/usr/libexec/java_home
install.packages("devtools", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
# Installs the master branch of XLConnect (= current development version)
install_github("xlconnect", username = "miraisolutions", ref = "master")
library(XLConnect)
library(XLConnect)
install.packages("rJava", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("XLConnect")
library(XLConnect)
install.packages("rJava")
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnect)
library("XLConnectJars", lib.loc="~/Library/R/3.4/library")
install.packages("rJava")
library(XLConnect)
install.packages("twitteR")
install.packages("tm")
install.packages("wordcloud")
tweets = userTimeline("jsanchezcristo", 100)
library(twitteR)
library(tm)
library(wordcloud)
tweets = userTimeline("jsanchezcristo", 100)
x<- 1: 20
matrix(x, nrow = 2, ncol = 10)
library(readxl)
Deuda_colombia <- read_excel("~/Desktop/Deuda_colombia.xls")
View(Deuda_colombia)
Deuda_colombia <- read_excel("~/Desktop/Deuda_colombia.xls")
head(Deuda_colombia)
attach(Deuda_colombia)
mean(Deuda_colombia$`Deuda Pública`)
summary(Deuda_colombia$`Deuda Pública`)
var(`Deuda Pública`)
sd(`Deuda Pública`)
split.screen(c(1,2,3))
hist(`Deuda Pública`)
screen(2)
boxplot(`Deuda Pública`)
screen(3)
hist(`Deuda Pública`, freq = FALSE)
hist(`Deuda Pública`, freq = TRUE)
plot(`Deuda Pública`)
split.screen(c(1,2))
hist(`Deuda Pública`, freq = TRUE)
screen(2)
boxplot(`Deuda Pública`)
summary(`Reservas
Internacionales`, `Indice Bursatil
Colombia`)
split.screen(c(1,2))
hist(`Reservas
Internacionales`, frec= TRUE)
screen(2)
boxplot(`Reservas
Internacionales`)
split.screen(c(1,2))
hist(`Indice Bursatil
Colombia`)
screen(2)
boxplot(`Indice Bursatil
Colombia`)
cor(Deuda_colombia[,2:4])
Deuda_colombia <- read_excel("~/Desktop/Deuda_colombia.xls")
head(Deuda_colombia)
Deuda_colombia <- read_excel("~/Desktop/Deuda_colombia.xls")
library(readxl)
Deuda_colombia <- read_excel("~/Desktop/Deuda_colombia.xls")
Dueda<-Deuda_colombia
Dueda<-Deuda_colombia[-1]
colname(Deuda)<-c("y", "X_1", "X_2")
colnames(Deuda)<-c("y", "X_1", "X_2")
Dueda<-Deuda_colombia[-1]
colnames(Deuda)<-c("y", "X_1", "X_2")
colnames(Dueda)<-c("y", "X_1", "X_2")
Deuda
Deuda<-Deuda_colombia[-1]
colnames(Deuda)<-c("y", "X_1", "X_2")
Deuda
cor(Deuda)
scatter1<-plot(y~X_1)
scatter1<-plot(Y~X_1)
scatter1<-plot(Deuda$y~Deuda$X_1)
Regresión<-lm(Deuda$y~Deuda$X_1)
abline(Regresión)
scatter1<-plot(Deuda$y~Deuda$X_1)
Regresión<-lm(Deuda$y~Deuda$X_1)
Regresión
abline(Regresión)
summary(Regresión)
scatter1<-plot(Deuda$y~Deuda$X_1)
abline(Regresión)
summary(Regresión)
X<-cbind(1,Deuda$X_1, Deuda$X_2)
X
y1<-cbind(Deuda$y)
y1
Transpuesta_X<-(t(X))
Transpuesta_X
XtX<-Transpuesta_X%*%X
XtX
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
det(XtX)
InversaXtX<-(ginv(XtX))
InversaXtX
Xy<- XtX%*%y
Xy<- XtX%*%y1
Xy<- XtX%*%Deuda$y1
y1
Xy<- XtX%*%y1
Xy<- XtX%*%y1
Xy
X<-cbind(1,Deuda$X_1, Deuda$X_2) # EL 1 es el intercepto
X
y1<-cbind(Deuda$y)# Se transforma la deuda pública como un vector
y1
Xy<- XtX%*%y1
y1
Xy<- XtX%*%y1
Xy<- XtX%* %y1
XtX
Xy<- XtX%*%y1
Xy<- XtX%*%Deuda$y
Xy<- XtX%*%y1
InversaXtX
y1
XtX
Xy<- XtX%*%y1
Y1<-cbind(Deuda$y)
Xy<-Transpuesta_X%*%y1
Xy
rm(Y1)
beta<-InversaXtX%*%Xy
beta
colnames(beta)<-("y")
beta
modelo<-lm(Deuda$y~Deuda$X_1+Deuda$X_2)
summary(modelo)
scatter1<-plot(Deuda$y~Deuda$X_1)
det(XtX)
InversaXtX<-(ginv(XtX))
InversaXtX
X<-cbind(1,Deuda$X_1, Deuda$X_2) # EL 1 es el intercepto
X
y1<-cbind(Deuda$y)# Se transforma la deuda pública como un vector
Transpuesta_X<-(t(X))
Transpuesta_X
XtX<-Transpuesta_X%*%X
XtX
InversaXtX
Xy<-Transpuesta_X%*%y1
Xy
beta<-InversaXtX%*%Xy
beta
cor(Deuda)
grafica1<-plot(y~X_1)
attach(Deuda)
grafica1<-plot(y~X_1)
fit<-lm(y~X_1)
abline(fit)
grafica2<-plot(y~X_2)
fit2<-lm(y~X_2)
abline(fit2)
XX<-cbind(1,X_1,X_2)
YY1<-cbind(y)
trXX<-(t(XX))
X_X<-trXX%*%XX
X_X
det(X_X)
InverX_X<-(ginv(X_X))
InverX_X
XXyy<-trXX%*%YY1
XXyy
beta<-InverX_X%*%XXyy
beta
Prueba2<-lm(y~X_1+X_2)
Prueba2
modelo<-lm(Deuda$y~(Deuda$X_1+Deuda$X_2))
summary(modelo)
Transpuesta_X
XtX<-Transpuesta_X%*%X
XtX
library(MASS)
det(XtX)
InversaXtX<-(ginv(XtX))
InversaXtX
Xy<-Transpuesta_X%*%y1
Xy
beta<-InversaXtX%*%Xy
beta
modelo<-lm(Deuda$y~(Deuda$X_1+Deuda$X_2))
split.screen(c(1,2))
hist(`Indice Bursatil
Colombia`)
screen(2)
boxplot(`Indice Bursatil
Colombia`)
library(readxl)
Deuda_colombia <- read_excel("~/Desktop/Deuda_colombia.xls")
head(Deuda_colombia)
attach(Deuda_colombia)
summary(Deuda_colombia$`Deuda Pública`)
summary(`Reservas
Internacionales`, `Indice Bursatil
Colombia`)
split.screen(c(1,2))
hist(`Reservas
Internacionales`, frec= TRUE)
screen(2)
boxplot(`Reservas
Internacionales`)
split.screen(c(1,2))
hist(`Indice Bursatil
Colombia`)
screen(2)
boxplot(`Indice Bursatil
Colombia`)
cor(Deuda_colombia[,2:4])
Deuda<-Deuda_colombia[-1]
colnames(Deuda)<-c("y", "X_1", "X_2")
Deuda
cor(Deuda) # Acá se puede visualizar de mejor manera los datos.
scatter1<-plot(Deuda$y~Deuda$X_1)
abline(Regresión)
Regresión<-lm(Deuda$y~Deuda$X_1)
Regresión
scatter1<-plot(Deuda$y~Deuda$X_1)
abline(Regresión)
X<-cbind(1,Deuda$X_1, Deuda$X_2) # EL 1 es el intercepto
X
summary(modelo)
attach(Deuda_colombia)
summary(Deuda_colombia$`Deuda Pública`)
var(`Deuda Pública`)
sd(`Deuda Pública`)
split.screen(c(1,2))
hist(`Deuda Pública`, freq = TRUE)
screen(2)
boxplot(`Deuda Pública`)
Deuda_colombia
cor(Deuda_colombia[,2:4])
Deuda<-Deuda_colombia[-1]
Deuda
cor(Deuda) # Acá se puede visualizar de mejor manera los datos.
Regresión<-lm(Deuda$y~Deuda$X_1)
Deuda<-Deuda_colombia[-1]
colnames(Deuda)<-c("y", "X_1", "X_2")
Deuda
cor(Deuda) # Acá se puede visualizar de mejor manera los datos.
Regresión<-lm(Deuda$y~Deuda$X_1)
Regresión
summary(Regresión)
scatter1<-plot(Deuda$y~Deuda$X_1)
abline(Regresión)
scatter1<-plot(Deuda$y~Deuda$X_1)
abline(Regresión)
X<-cbind(1,Deuda$X_1, Deuda$X_2) # EL 1 es el intercepto
X
library(readxl)
Deuda_colombia <- read_excel("~/Desktop/Deuda_colombia.xls")
head(Deuda_colombia)
attach(Deuda_colombia)
Deuda_colombia
summary(Deuda_colombia$`Deuda Pública`)
var(`Deuda Pública`)
sd(`Deuda Pública`)
split.screen(c(1,2))
hist(`Deuda Pública`, freq = TRUE)
screen(2)
boxplot(`Deuda Pública`)
cor(Deuda_colombia[,2:4])
Deuda<-Deuda_colombia[-1]
colnames(Deuda)<-c("y", "X_1", "X_2")
Deuda
cor(Deuda)
Regresión<-lm(Deuda$y~Deuda$X_1)
Regresión
summary(Regresión)
scatter1<-plot(Deuda$y~Deuda$X_1)
abline(Regresión)
X<-cbind(1,Deuda$X_1, Deuda$X_2) # EL 1 es el intercepto
X
y1<-cbind(Deuda$y)# Se transforma la deuda pública como un vector
y1
cor(Deuda)
Deuda
Deuda_colombia
Deuda_S<-Deuda_colombia[-1]
Deuda_S
Deuda_S
colnames(Deuda_S)<-c("y","x_1","x_2")
Deuda_S
attach(Deuda_S)
mean(y)
summary(y)
rm(X,Y)
rm(X,Y1)
rm(X,y1)
X<-cbind(1,x_1,x_2)
X
y1<-cbind(y)
y1
trX<-(t(X))
trX
X_X<-trx%*%X
X_X<-trX%*%X
X_X
det(X_X)
invX_X<-(ginv(X_X))
invX_X
Xy<-trX%*%y1
Xy
beta<-invX_X%*%Xy
beta
lm(y~x_1+x_2)
grasas <- read.table("http://www.uam.es/joser.berrendero/datos/EdadPesoGrasas.txt",
header = TRUE)
names(grasas)
attach(grasas)
X<-cbind(1,grasas$edad. grasas$grasas)
X<-cbind(1,grasas$edad,grasas$grasas)
y1<-cbind(peso)
trX<-(t(X))
trX
X_X<-trX%*%X
X_X
det(X_X)
invX_X<-(ginv(X_X))
Xy<-trX%*%y1
Xy
beta<-invX_X%*%Xy
beta
lm(peso~edad+grasas)
lm(peso~edad+grasa)
lm(grasas$peso~grasas$edad+grasas$grasas)
split.screen(c(1,2))
hist(`Indice Bursatil
Colombia`)
split.screen(c(1,2))
hist(`Indice Bursatil
Colombia`)
screen(2)
boxplot(`Indice Bursatil
Colombia`)
cor(Deuda_colombia[,2:4])
Deuda<-Deuda_colombia[-1]
colnames(Deuda)<-c("y", "X_1", "X_2")
Deuda
cor(Deuda) #
Regresión<-lm(Deuda$y~Deuda$X_1)
Regresión
summary(Regresión)
scatter1<-plot(Deuda$y~Deuda$X_1)
abline(Regresión)
X<-cbind(1,Deuda$X_1, Deuda$X_2) # EL 1 es el intercepto
X
y1<-cbind(Deuda$y)# Se transforma la deuda pública como un vector
y1
#Transpuesta de X
Transpuesta_X<-(t(X))
Transpuesta_X
XtX<-Transpuesta_X%*%X
XtX
library(MASS)
det(XtX)
InversaXtX<-(ginv(XtX))
InversaXtX
Xy<-Transpuesta_X%*%y1
Xy
beta<-InversaXtX%*%Xy
colnames(beta)<-("y")
beta
modelo<-lm(Deuda$y~(Deuda$X_1+Deuda$X_2))
summary(modelo)
modelo<-lm(Deuda$y~(Deuda$X_1+Deuda$X_2))
summary(modelo)
install.packages("devtools")
library(devtools)
library(readxl)
LISTADO_PROFESORES_PREVISTOS_1_ <- read_excel("~/Downloads/LISTADO_PROFESORES_PREVISTOS (1).xls")
View(LISTADO_PROFESORES_PREVISTOS_1_)
attach(LISTADO_PROFESORES_PREVISTOS_1_)
library(rpivotTable)
rpivotTable(LISTADO_PROFESORES_PREVISTOS_1_)
rpivotTable(LISTADO_PROFESORES_PREVISTOS_1_, rows = LISTADO_PROFESORES_PREVISTOS_1_$X__2)
summary(LISTADO_PROFESORES_PREVISTOS_1_)
View(summary(LISTADO_PROFESORES_PREVISTOS_1_))
summary(LISTADO_PROFESORES_PREVISTOS_1_$X__2)
rpivotTable(LISTADO_PROFESORES_PREVISTOS_1_, rows = LISTADO_PROFESORES_PREVISTOS_1_$X__2)
setwd("~/RDatelligence/RUNT")
shiny::runApp()
