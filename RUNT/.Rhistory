b <- (phi^a - (-phi)^(-a))/sqrt(5)
})[3]
cumulate <- cumulate + timing
}
timing <- cumulate/runs
times[1, 3] <- timing
cat(c("3,500,000 Fibonacci numbers calculation (vector calc)(sec): ", timing, "\n"))
remove("a", "b", "phi")
if (R.Version()$os == "Win32" || R.Version()$os == "mingw32") flush.console()
# (2)
cumulate <- 0; a <- 3000; b <- 0
for (i in 1:runs) {
invisible(gc())
timing <- system.time({
b <- rep(1:a, a); dim(b) <- c(a, a);
b <- 1 / (t(b) + 0:(a-1))
# Rem: this is twice as fast as the following code proposed by R programmers
# a <- 1:a; b <- 1 / outer(a - 1, a, "+")
})[3]
cumulate <- cumulate + timing
}
timing <- cumulate/runs
times[2, 3] <- timing
cat(c("Creation of a 3000x3000 Hilbert matrix (matrix calc) (sec): ", timing, "\n"))
remove("a", "b")
if (R.Version()$os == "Win32" || R.Version()$os == "mingw32") flush.console()
# (3)
cumulate <- 0; c <- 0
gcd2 <- function(x, y) {if (sum(y > 1.0E-4) == 0) x else {y[y == 0] <- x[y == 0]; Recall(y, x %% y)}}
for (i in 1:runs) {
a <- ceiling(Runif(400000)*1000)
b <- ceiling(Runif(400000)*1000)
invisible(gc())
timing <- system.time({
c <- gcd2(a, b)                            # gcd2 is a recursive function
})[3]
cumulate <- cumulate + timing
}
timing <- cumulate/runs
times[3, 3] <- timing
cat(c("Grand common divisors of 400,000 pairs (recursion)__ (sec): ", timing, "\n"))
remove("a", "b", "c", "gcd2")
if (R.Version()$os == "Win32" || R.Version()$os == "mingw32") flush.console()
# (4)
cumulate <- 0; b <- 0
for (i in 1:runs) {
b <- rep(0, 500*500); dim(b) <- c(500, 500)
invisible(gc())
timing <- system.time({
# Rem: there are faster ways to do this
# but here we want to time loops (220*220 'for' loops)!
for (j in 1:500) {
for (k in 1:500) {
b[k,j] <- abs(j - k) + 1
}
}
})[3]
cumulate <- cumulate + timing
}
timing <- cumulate/runs
times[4, 3] <- timing
cat(c("Creation of a 500x500 Toeplitz matrix (loops)_______ (sec): ", timing, "\n"))
remove("b", "j", "k")
if (R.Version()$os == "Win32" || R.Version()$os == "mingw32") flush.console()
# (5)
cumulate <- 0; p <- 0; vt <- 0; vr <- 0; vrt <- 0; rvt <- 0; RV <- 0; j <- 0; k <- 0;
x2 <- 0; R <- 0; Rxx <- 0; Ryy <- 0; Rxy <- 0; Ryx <- 0; Rvmax <- 0
# Calculate the trace of a matrix (sum of its diagonal elements)
Trace <- function(y) {sum(c(y)[1 + 0:(min(dim(y)) - 1) * (dim(y)[1] + 1)], na.rm=FALSE)}
for (i in 1:runs) {
x <- abs(Rnorm(45*45)); dim(x) <- c(45, 45)
invisible(gc())
timing <- system.time({
# Calculation of Escoufier's equivalent vectors
p <- ncol(x)
vt <- 1:p                                  # Variables to test
vr <- NULL                                 # Result: ordered variables
RV <- 1:p                                  # Result: correlations
vrt <- NULL
for (j in 1:p) {                           # loop on the variable number
Rvmax <- 0
for (k in 1:(p-j+1)) {                   # loop on the variables
x2 <- cbind(x, x[,vr], x[,vt[k]])
R <- cor(x2)                           # Correlations table
Ryy <- R[1:p, 1:p]
Rxx <- R[(p+1):(p+j), (p+1):(p+j)]
Rxy <- R[(p+1):(p+j), 1:p]
Ryx <- t(Rxy)
rvt <- Trace(Ryx %*% Rxy) / sqrt(Trace(Ryy %*% Ryy) * Trace(Rxx %*% Rxx)) # RV calculation
if (rvt > Rvmax) {
Rvmax <- rvt                         # test of RV
vrt <- vt[k]                         # temporary held variable
}
}
vr[j] <- vrt                             # Result: variable
RV[j] <- Rvmax                           # Result: correlation
vt <- vt[vt!=vr[j]]                      # reidentify variables to test
}
})[3]
cumulate <- cumulate + timing
}
times[5, 3] <- timing
cat(c("Escoufier's method on a 45x45 matrix (mixed)________ (sec): ", timing, "\n"))
remove("x", "p", "vt", "vr", "vrt", "rvt", "RV", "j", "k")
remove("x2", "R", "Rxx", "Ryy", "Rxy", "Ryx", "Rvmax", "Trace")
if (R.Version()$os == "Win32" || R.Version()$os == "mingw32") flush.console()
times[ , 3] <- sort(times[ , 3])
cat("                      --------------------------------------------\n")
cat(c("                Trimmed geom. mean (2 extremes eliminated): ", exp(mean(log(times[2:4, 3]))), "\n\n\n"))
cat(c("Total time for all 15 tests_________________________ (sec): ", sum(times), "\n"))
cat(c("Overall mean (sum of I, II and III trimmed means/3)_ (sec): ", exp(mean(log(times[2:4, ]))), "\n"))
remove("cumulate", "timing", "times", "runs", "i")
cat("                      --- End of test ---\n\n")
q()
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#################################
initData <- read.csv(dir()[1],
sep = ";")
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
filter1 <- group_by(initData, MARCA, MODELO)
graphData <- summarize(filter1,
total = sum(CANTIDAD))
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point()
graph1 <- graph1 + theme(legend.position="left") +
theme_bw()
graph1
setwd("~/Documents/RUNT")
library(ggplot2)
library(dplyr)
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#################################
setwd("~/Documents/RUNT")
initData <- read.csv(dir()[1],
sep = ";")
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
filter1 <- group_by(initData, MARCA, MODELO)
graphData <- summarize(filter1,
total = sum(CANTIDAD))
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point()
graph1 <- graph1 + theme(legend.position="left") +
theme_bw()
graph1
graphData <- summarize(filter1,
total = sum(CANTIDAD))
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_line()
graph1 <- graph1 + theme(legend.position="left") +
theme_bw()
graph1
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point()
graph1 <- graph1 + theme(legend.position="none") +
theme_bw()
graph1
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point()
graph1 <- graph1 + theme(legend.position="left") +
theme_bw()
graph1
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point()
graph2 <- graph1 + theme(legend.position="left") +
theme_bw()
graph2
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point()
graph1
graph1 <- graph1 + theme(legend.position="left")
graph1
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point() +
theme_bw()
graph1 <- graph1 + theme(legend.position="bottom")
graph1
str(initData)
fechaIni <- as.Date("2000-01-01")
Sys.Date()
library(ggplot2)
library(dplyr)
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#################################
#Configura el Working Directory
setwd("~/Documents/RUNT")
#Lee el archivo CSV
initData <- read.csv(dir()[1],
sep = ";")
#Fechas inicial y final
fechaIni <- as.Date("2000-01-01")
fechaFin <- Sys.Date()
#Procesamiento de datos para fecha
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
#Alistamiento de datos para gráfica
filter1 <- group_by(initData, MARCA, MODELO)
graphData <- summarize(filter1,
total = sum(CANTIDAD))
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point() +
theme_bw() + theme(legend.position="bottom")
graph1
#Despliegue de gráfica
graph1
library(ggplot2)
newData <- data.frame(c(-50:40),-1/c(-50:40) + 2); names(a) <- c("x", "y")
ggplot(newData, aes(x, y)) + geom_line() +
scale_y_continuous(limits=c(0, max(newData[newData$x > 0, 2]) * 1.1)) +
scale_x_continuous(limits=c(0, max(newData[newData$x > 0, 1]) * 1.1))
h <- 40; k <- 1.5; a <- 10; b <- 0.475
x <- 40:50; y <- k + sqrt((b^2)*(1-(((x-h)^2)/a^2)))
custC <- data.frame(x, y); names(custC) <- c("x", "y")
custA <- newData[52:54, ]; names(custA) <- c("x", "y")
custB <- newData[54:91, ]; names(custB) <- c("x", "y")
ggplot(custA, aes(x, y)) + geom_area(aes(fill = "A"), fill = "Green") +
scale_x_continuous(limits=c(0, 50)) +
geom_area(data = custB, aes(x, y, fill = "B"), fill = "yellow") +
geom_area(data = custC, aes(x, y, fill = "C"), fill = "red") +
theme_bw()+
labs(x = "Número de clientes", y = "Utilidad acumulada (en cientos de millones de pesos)", title = "Pareto de clientes", fill = "Tipo de cliente")# +
#theme(legend.position="none")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
fechaIni <- as.Date("2000-01-01")
fechaFin <- Sys.Date()
inFile1 <- "base_runt.csv"
#inFile1 <- input$file1
#Lee el archivo CSV
initData <- read.csv(inFile1,
sep = ";")
#Fechas inicial y final
#fechaIni <- as.Date(input$date1)
#fechaFin <- as.Date(input$date2)
#Procesamiento de datos para fecha
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
#Alistamiento de datos para gráfica
filter1 <- group_by(initData, MARCA, MODELO)
graphData <- summarize(filter1,
total = sum(CANTIDAD))
#Generación de gráfica
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point() +
theme_bw() + theme(legend.position="bottom")
#Despliegue de gráfica
graph1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Paquetes a cargar
library(ggplot2)
library(dplyr)
#Declaración de funciones
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#Configura el Working Directory
setwd("~/Documents/RUNT")
#Lee el archivo CSV
initData <- read.csv(dir()[1],
sep = ";")
#Fechas inicial y final
fechaIni <- as.Date("2000-01-01")
fechaFin <- Sys.Date()
#Procesamiento de datos para fecha
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
unique(initData$date)
library(ggplot2)
#Paquetes a cargar
library(ggplot2)
library(dplyr)
#Declaración de funciones
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#Configura el Working Directory
setwd("~/Documents/RUNT")
#Lee el archivo CSV
initData <- read.csv(dir()[1],
sep = ";")
#Fechas inicial y final
fechaIni <- as.Date("2010-02-01")
fechaFin <- Sys.Date()
#Procesamiento de datos para fecha
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
#Filtrado por fechas
initData <- initData[(initData$date <= fechaFin) && (initData$date >= fechaIni) , ]
unique(initData$date)
fechaFin
#Paquetes a cargar
library(ggplot2)
library(dplyr)
#Declaración de funciones
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#Configura el Working Directory
setwd("~/Documents/RUNT")
#Lee el archivo CSV
initData <- read.csv(dir()[1],
sep = ";")
#Fechas inicial y final
fechaIni <- as.Date("2010-02-01")
fechaFin <- Sys.Date()
#Procesamiento de datos para fecha
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
#Filtrado por fechas
initData <- initData[initData$date >= fechaIni , ]
unique(initData$date)
#Paquetes a cargar
library(ggplot2)
library(dplyr)
#Declaración de funciones
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#Configura el Working Directory
setwd("~/Documents/RUNT")
#Lee el archivo CSV
initData <- read.csv(dir()[1],
sep = ";")
#Fechas inicial y final
fechaIni <- as.Date("2010-02-01")
fechaFin <- Sys.Date()
#Procesamiento de datos para fecha
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
unique(initData$date)
fechaFin <- as.Date("2011-01-01")
unique(initData$date)
initData <- initData[initData$date <= fechaFin, ]
unique(initData$date)
runApp()
runApp()
runApp()
runApp()
#Paquetes a cargar
library(ggplot2)
library(dplyr)
#Declaración de funciones
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
#Configura el Working Directory
setwd("~/Documents/RUNT")
#Lee el archivo CSV
initData <- read.csv(dir()[1],
sep = ";")
#Fechas inicial y final
fechaIni <- as.Date("2010-02-01")
fechaFin <- Sys.Date()
#Procesamiento de datos para fecha
initData$month <- firstup(unique(tolower(initData$MONTH_)))
conv <- data.frame(month = firstup(unique(tolower(initData$MONTH_))),
monthNum = 1:length(firstup(unique(tolower(initData$MONTH_)))))
initData <- merge(initData,
conv,
by = "month")
initData$date <- as.Date(paste(initData$ANO,
initData$monthNum,
"01",
sep = "/"),
format = "%Y/%m/%d")
#Filtrado por fechas
initData <- initData[initData$date >= fechaIni, ]
initData <- initData[initData$date <= fechaFin, ]
#Alistamiento de datos para gráfica
filter1 <- group_by(initData, MARCA, MODELO)
graphData <- summarize(filter1,
total = sum(CANTIDAD))
#Generación de gráfica
graph1 <- ggplot(graphData,
aes(x = MODELO,
y = total,
color = MARCA)) +
geom_point() +
theme_bw() + theme(legend.position="bottom")
#Despliegue de gráfica
graph1
graphData
